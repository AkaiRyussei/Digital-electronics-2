
Rassemblement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000892  00000926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080012e  0080012e  00000954  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001972  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab3  00000000  00000000  00002466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b69  00000000  00000000  00002f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f9  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a7c  00000000  00000000  000044c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004f41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_18>
  4c:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  9e:	0c 94 47 04 	jmp	0x88e	; 0x88e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <GPIO_toggle>:
  f0:	fc 01       	movw	r30, r24
  f2:	40 81       	ld	r20, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <GPIO_toggle+0xe>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <GPIO_toggle+0xa>
 102:	24 27       	eor	r18, r20
 104:	20 83       	st	Z, r18
 106:	08 95       	ret

00000108 <closeWindow>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <closeWindow+0x6>
 116:	00 c0       	rjmp	.+0      	; 0x118 <closeWindow+0x10>
 118:	00 00       	nop

//function to close the window
void closeWindow (){
	for ( int i = 0; i < 50000; i++){
		_delay_ms(20);
		GPIO_toggle(&PORTC, SERVO_M);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <closeWindow+0x20>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <closeWindow+0x26>
 12e:	00 00       	nop
		_delay_ms(2);
		GPIO_toggle(&PORTC, SERVO_M);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 13a:	e6 cf       	rjmp	.-52     	; 0x108 <closeWindow>

0000013c <openWindow>:
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <openWindow+0x6>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <openWindow+0x10>
 14c:	00 00       	nop

//function to open the window
void openWindow(){
	for ( int i = 0; i < 50000; i++){
		_delay_ms(20);
		GPIO_toggle(&PORTC, SERVO_M);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <openWindow+0x20>
 160:	00 c0       	rjmp	.+0      	; 0x162 <openWindow+0x26>
 162:	00 00       	nop
		_delay_ms(1);
		GPIO_toggle(&PORTC, SERVO_M);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 16e:	e6 cf       	rjmp	.-52     	; 0x13c <openWindow>

00000170 <main>:


int main(void)
{
	
	GPIO_config_output(&DDRC, SERVO_M); // SERVO_M at PORTC configuration
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	87 e2       	ldi	r24, 0x27	; 39
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, LED); // LED at PORTB configuration
 17a:	63 e0       	ldi	r22, 0x03	; 3
 17c:	84 e2       	ldi	r24, 0x24	; 36
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, RELAY1); // RELAY1 at PORTB configuration
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	84 e2       	ldi	r24, 0x24	; 36
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, RELAY2); // RELAY2 at PORTB configuration
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	84 e2       	ldi	r24, 0x24	; 36
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	
	GPIO_write_low(&PORTC, SERVO_M);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	88 e2       	ldi	r24, 0x28	; 40
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, LED);
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, RELAY1); 
 1ac:	65 e0       	ldi	r22, 0x05	; 5
 1ae:	85 e2       	ldi	r24, 0x25	; 37
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, RELAY2);
 1b6:	64 e0       	ldi	r22, 0x04	; 4
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	89 ef       	ldi	r24, 0xF9	; 249
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x56>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x60>
 1d0:	00 00       	nop
	
	// the window is closed at the beginning of the program
	for ( int i = 0; i < 50000; i++){
		_delay_ms(20);
		GPIO_toggle(&PORTC, SERVO_M);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9f e1       	ldi	r25, 0x1F	; 31
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0x70>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x76>
 1e6:	00 00       	nop
		_delay_ms(2);
		GPIO_toggle(&PORTC, SERVO_M);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 1f2:	e6 cf       	rjmp	.-52     	; 0x1c0 <main+0x50>

000001f4 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose : FSM in order to update the input variables
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	1f 93       	push	r17
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <__vector_13+0x2a>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	//Start ADC conversion ( for the light sensor )
	ADCSRA |= (1<<ADSC);
 222:	ea e7       	ldi	r30, 0x7A	; 122
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24
	
	
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 0x5c;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus 
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	90 e3       	ldi	r25, 0x30	; 48
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	89 83       	std	Y+1, r24	; 0x01
    // FSM
    switch (state)
 234:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	51 f0       	breq	.+20     	; 0x250 <__vector_13+0x5c>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	09 f4       	brne	.+2      	; 0x242 <__vector_13+0x4e>
 240:	90 c0       	rjmp	.+288    	; 0x362 <__vector_13+0x16e>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	09 f0       	breq	.+2      	; 0x248 <__vector_13+0x54>
 246:	a1 c0       	rjmp	.+322    	; 0x38a <__vector_13+0x196>
    {
		
    case STATE_IDLE:
		state = STATE_SEND;
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 24e:	a0 c0       	rjmp	.+320    	; 0x390 <__vector_13+0x19c>
    
    // Transmit I2C slave address and get result
    case STATE_SEND:

        result = twi_start((addr<<1) + TWI_WRITE); 
 250:	88 eb       	ldi	r24, 0xB8	; 184
 252:	0e 94 59 03 	call	0x6b2	; 0x6b2 <twi_start>
		
	
		/* temperature and humidity data retrieve */
		
		//determining which parameter should be measured
		if (switchMeasure == 0)
 256:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 25a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	21 f4       	brne	.+8      	; 0x26a <__vector_13+0x76>
			twi_write(0x02); //0x02 for temperature
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_write>
 268:	05 c0       	rjmp	.+10     	; 0x274 <__vector_13+0x80>
		else if(switchMeasure == 1)
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	19 f4       	brne	.+6      	; 0x274 <__vector_13+0x80>
			twi_write(0x00); //0x00 for humidity
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_write>
		
		if ( switchMeasure  <= 1 ){
 274:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 278:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 27c:	02 97       	sbiw	r24, 0x02	; 2
 27e:	0c f0       	brlt	.+2      	; 0x282 <__vector_13+0x8e>
 280:	59 c0       	rjmp	.+178    	; 0x334 <__vector_13+0x140>
			twi_stop();
 282:	0e 94 94 03 	call	0x728	; 0x728 <twi_stop>
			result = twi_start((addr<<1) + TWI_READ);
 286:	89 eb       	ldi	r24, 0xB9	; 185
 288:	0e 94 59 03 	call	0x6b2	; 0x6b2 <twi_start>
			
			//getting the integer part of the result
			result = twi_read_ack();
 28c:	0e 94 80 03 	call	0x700	; 0x700 <twi_read_ack>
			
			//writing the integer part into the input variables 
			if (switchMeasure == 0){
 290:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <switchMeasure>
 294:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <switchMeasure+0x1>
 298:	21 15       	cp	r18, r1
 29a:	31 05       	cpc	r19, r1
 29c:	31 f4       	brne	.+12     	; 0x2aa <__vector_13+0xb6>
				temperature = result;
 29e:	48 2f       	mov	r20, r24
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	50 93 31 01 	sts	0x0131, r21	; 0x800131 <temperature+0x1>
 2a6:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <temperature>
			}
			if (switchMeasure == 1){
 2aa:	21 30       	cpi	r18, 0x01	; 1
 2ac:	31 05       	cpc	r19, r1
 2ae:	31 f4       	brne	.+12     	; 0x2bc <__vector_13+0xc8>
				humidity = result;
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <humidity+0x1>
 2b8:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <humidity>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2bc:	4a e0       	ldi	r20, 0x0A	; 10
 2be:	be 01       	movw	r22, r28
 2c0:	6f 5f       	subi	r22, 0xFF	; 255
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 12 04 	call	0x824	; 0x824 <__itoa_ncheck>
			}
			
			//printing on the uart the result
			itoa(result, uart_string, 10);
			uart_puts(uart_string);
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
			
			//getting the fractional part of the result
			result = twi_read_nack();
 2d2:	0e 94 8a 03 	call	0x714	; 0x714 <twi_read_nack>
 2d6:	18 2f       	mov	r17, r24
			twi_stop();
 2d8:	0e 94 94 03 	call	0x728	; 0x728 <twi_stop>
 2dc:	4a e0       	ldi	r20, 0x0A	; 10
 2de:	be 01       	movw	r22, r28
 2e0:	6f 5f       	subi	r22, 0xFF	; 255
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	81 2f       	mov	r24, r17
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 12 04 	call	0x824	; 0x824 <__itoa_ncheck>
			
			//printing the fractional part on the uart
			itoa(result, uart_string, 10);
			uart_puts(".");
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
			uart_puts(uart_string);
 2f4:	ce 01       	movw	r24, r28
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
			uart_puts(" ");
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
			
			//printing the corresponding unit
			if (switchMeasure == 0)
 304:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 308:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 30c:	89 2b       	or	r24, r25
 30e:	21 f4       	brne	.+8      	; 0x318 <__vector_13+0x124>
				uart_puts("Celsius degrees");
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
				
			if (switchMeasure == 1)
 318:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 31c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	21 f4       	brne	.+8      	; 0x32c <__vector_13+0x138>
				uart_puts("% of humidity");
 324:	85 e1       	ldi	r24, 0x15	; 21
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
				
			uart_puts(" ");
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
		}
		
		switchMeasure ++; // adding 1 in order to switch to the next parameter to be measured ( cycling order )
 334:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 338:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <switchMeasure+0x1>
 342:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <switchMeasure>
		
		// if the cycle has ended, the counter is set to 0 and the process is repeated
		if ( switchMeasure == 3 ){
 346:	03 97       	sbiw	r24, 0x03	; 3
 348:	41 f4       	brne	.+16     	; 0x35a <__vector_13+0x166>
			switchMeasure = 0; 
 34a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <switchMeasure+0x1>
 34e:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <switchMeasure>
			uart_puts("\r\n"); // carrier return in the uart
 352:	83 e2       	ldi	r24, 0x23	; 35
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
		}
		
		state = STATE_IDLE;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 360:	17 c0       	rjmp	.+46     	; 0x390 <__vector_13+0x19c>
 362:	40 e1       	ldi	r20, 0x10	; 16
 364:	be 01       	movw	r22, r28
 366:	6f 5f       	subi	r22, 0xFF	; 255
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8c e5       	ldi	r24, 0x5C	; 92
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 12 04 	call	0x824	; 0x824 <__itoa_ncheck>
    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		
		itoa(addr, uart_string, 16);
		uart_puts(uart_string);
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
		uart_puts(" ");
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
		state = STATE_IDLE;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 388:	03 c0       	rjmp	.+6      	; 0x390 <__vector_13+0x19c>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
}
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	1f 91       	pop	r17
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_21>:
	
ISR(ADC_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <__vector_21+0x28>
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <__vector_21+0x2a>
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
	if ( switchMeasure == 2){
 3ea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 3ee:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 3f2:	02 97       	sbiw	r24, 0x02	; 2
 3f4:	31 f5       	brne	.+76     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		
		//Send ADC value to UART Tx
		uint16_t value = 0;
		char lcd_string[4] = "";
 3f6:	1a 82       	std	Y+2, r1	; 0x02
 3f8:	19 82       	std	Y+1, r1	; 0x01
 3fa:	1c 82       	std	Y+4, r1	; 0x04
 3fc:	1b 82       	std	Y+3, r1	; 0x03
		
		value = ADC;                  // Copy ADC result to 16-bit variable
 3fe:	e8 e7       	ldi	r30, 0x78	; 120
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	91 81       	ldd	r25, Z+1	; 0x01
		light = ADC;
 406:	20 81       	ld	r18, Z
 408:	31 81       	ldd	r19, Z+1	; 0x01
 40a:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <__data_end+0x1>
 40e:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__data_end>
 412:	4a e0       	ldi	r20, 0x0A	; 10
 414:	be 01       	movw	r22, r28
 416:	6f 5f       	subi	r22, 0xFF	; 255
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	0e 94 12 04 	call	0x824	; 0x824 <__itoa_ncheck>
		itoa(value, lcd_string, 10);  // Convert decimal value to string

		//Send ADC value to UART Tx
		if ( change == false ){
 41e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <change>
 422:	81 11       	cpse	r24, r1
 424:	08 c0       	rjmp	.+16     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			uart_puts(lcd_string);
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
			uart_puts(" light");
 42e:	86 e2       	ldi	r24, 0x26	; 38
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 05 04 	call	0x80a	; 0x80a <uart_puts>
		}
		change = !change;
 436:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <change>
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	89 27       	eor	r24, r25
 43e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <change>
	}
}
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_9>:
/* Interrupt service routines ----------------------------------------*/
/**********************************************************************
 * Function: Timer/Counter2 overflow interrupt
 * Purpose : output manager 
 **********************************************************************/
ISR(TIMER2_OVF_vect){
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	
	// turn on the LED if the light is low 
	if ( light < 320 ){
 492:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 496:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 49a:	80 34       	cpi	r24, 0x40	; 64
 49c:	91 40       	sbci	r25, 0x01	; 1
 49e:	30 f4       	brcc	.+12     	; 0x4ac <__vector_9+0x3c>
		GPIO_write_high(&PORTB, LED);
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	85 e2       	ldi	r24, 0x25	; 37
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__vector_9+0x46>
	}
	else{
		GPIO_write_low(&PORTB, LED); 
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	85 e2       	ldi	r24, 0x25	; 37
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	/* Determining the actions of the outputs in function 
	of the parameters humidity and temperature */
	
	//high temperature and high humidity
	if (temperature > 27 && humidity > 30){
 4b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 4ba:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 4be:	4c 97       	sbiw	r24, 0x1c	; 28
 4c0:	b0 f0       	brcs	.+44     	; 0x4ee <__vector_9+0x7e>
 4c2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 4c6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 4ca:	4f 97       	sbiw	r24, 0x1f	; 31
 4cc:	80 f0       	brcs	.+32     	; 0x4ee <__vector_9+0x7e>
		
		// stop irrigation and start ventilation
		GPIO_write_low(&PORTB, RELAY1);
 4ce:	65 e0       	ldi	r22, 0x05	; 5
 4d0:	85 e2       	ldi	r24, 0x25	; 37
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_high(&PORTB, RELAY2);
 4d8:	64 e0       	ldi	r22, 0x04	; 4
 4da:	85 e2       	ldi	r24, 0x25	; 37
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 4e2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 4e6:	81 11       	cpse	r24, r1
 4e8:	d3 c0       	rjmp	.+422    	; 0x690 <__vector_9+0x220>
				openWindow();
 4ea:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
		}
	}
	
	
	//high temperature and low humidity
	else if ( temperature > 27 && humidity < 5){
 4ee:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 4f2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 4f6:	4c 97       	sbiw	r24, 0x1c	; 28
 4f8:	b0 f0       	brcs	.+44     	; 0x526 <__vector_9+0xb6>
 4fa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 4fe:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 502:	05 97       	sbiw	r24, 0x05	; 5
 504:	80 f4       	brcc	.+32     	; 0x526 <__vector_9+0xb6>
		
		// start irrigation and start ventilation
		GPIO_write_high(&PORTB, RELAY1);
 506:	65 e0       	ldi	r22, 0x05	; 5
 508:	85 e2       	ldi	r24, 0x25	; 37
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_high(&PORTB, RELAY2);
 510:	64 e0       	ldi	r22, 0x04	; 4
 512:	85 e2       	ldi	r24, 0x25	; 37
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 51a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 51e:	81 11       	cpse	r24, r1
 520:	b7 c0       	rjmp	.+366    	; 0x690 <__vector_9+0x220>
			openWindow();
 522:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
			windowState = true;
		}
	}
	
	//low temperature and high humidity
	else if ( temperature < 10 && humidity > 30){
 526:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 52a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 52e:	0a 97       	sbiw	r24, 0x0a	; 10
 530:	b8 f4       	brcc	.+46     	; 0x560 <__vector_9+0xf0>
 532:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 536:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 53a:	4f 97       	sbiw	r24, 0x1f	; 31
 53c:	88 f0       	brcs	.+34     	; 0x560 <__vector_9+0xf0>
		// stop irrigation and start ventilation
		GPIO_write_low(&PORTB, RELAY1);
 53e:	65 e0       	ldi	r22, 0x05	; 5
 540:	85 e2       	ldi	r24, 0x25	; 37
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_high(&PORTB, RELAY2);
 548:	64 e0       	ldi	r22, 0x04	; 4
 54a:	85 e2       	ldi	r24, 0x25	; 37
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// close the window
		if ( windowState == true){
 552:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 556:	88 23       	and	r24, r24
 558:	09 f4       	brne	.+2      	; 0x55c <__vector_9+0xec>
 55a:	9a c0       	rjmp	.+308    	; 0x690 <__vector_9+0x220>
			closeWindow();
 55c:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
			windowState = false;
		}
	}
	
	//low temperature and low humidity
	else if ( temperature < 10 && humidity < 5){
 560:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 564:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 568:	0a 97       	sbiw	r24, 0x0a	; 10
 56a:	b8 f4       	brcc	.+46     	; 0x59a <__vector_9+0x12a>
 56c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 570:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 574:	05 97       	sbiw	r24, 0x05	; 5
 576:	88 f4       	brcc	.+34     	; 0x59a <__vector_9+0x12a>
		// start irrigation and stop ventilation
		GPIO_write_high(&PORTB, RELAY1);
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	85 e2       	ldi	r24, 0x25	; 37
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_low(&PORTB, RELAY2);
 582:	64 e0       	ldi	r22, 0x04	; 4
 584:	85 e2       	ldi	r24, 0x25	; 37
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		// close the window
		if ( windowState == true){
 58c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 590:	88 23       	and	r24, r24
 592:	09 f4       	brne	.+2      	; 0x596 <__vector_9+0x126>
 594:	7d c0       	rjmp	.+250    	; 0x690 <__vector_9+0x220>
			closeWindow();
 596:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
			windowState = false;
		}
	}
	
	//high temperature 
	else if ( temperature > 27 ){
 59a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 59e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 5a2:	4c 97       	sbiw	r24, 0x1c	; 28
 5a4:	80 f0       	brcs	.+32     	; 0x5c6 <__vector_9+0x156>
		// start irrigation and start ventilation
		GPIO_write_high(&PORTB, RELAY1); 
 5a6:	65 e0       	ldi	r22, 0x05	; 5
 5a8:	85 e2       	ldi	r24, 0x25	; 37
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_high(&PORTB, RELAY2);
 5b0:	64 e0       	ldi	r22, 0x04	; 4
 5b2:	85 e2       	ldi	r24, 0x25	; 37
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 5ba:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 5be:	81 11       	cpse	r24, r1
 5c0:	67 c0       	rjmp	.+206    	; 0x690 <__vector_9+0x220>
			openWindow();
 5c2:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
			windowState = true;
		}
	}
	
	//high humidity
	else if ( humidity > 30){
 5c6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 5ca:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 5ce:	4f 97       	sbiw	r24, 0x1f	; 31
 5d0:	80 f0       	brcs	.+32     	; 0x5f2 <__vector_9+0x182>
		
		// start ventilation
		GPIO_write_low(&PORTB, RELAY1);
 5d2:	65 e0       	ldi	r22, 0x05	; 5
 5d4:	85 e2       	ldi	r24, 0x25	; 37
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_high(&PORTB, RELAY2);
 5dc:	64 e0       	ldi	r22, 0x04	; 4
 5de:	85 e2       	ldi	r24, 0x25	; 37
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 5e6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 5ea:	81 11       	cpse	r24, r1
 5ec:	51 c0       	rjmp	.+162    	; 0x690 <__vector_9+0x220>
			openWindow();
 5ee:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
			windowState = true;
		}
	}
	
	//low temperature 
	else if ( temperature < 10){
 5f2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 5f6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 5fa:	0a 97       	sbiw	r24, 0x0a	; 10
 5fc:	20 f5       	brcc	.+72     	; 0x646 <__vector_9+0x1d6>
		
		// stop irrigation and stop ventilation
		GPIO_write_low(&PORTB, RELAY1);
 5fe:	65 e0       	ldi	r22, 0x05	; 5
 600:	85 e2       	ldi	r24, 0x25	; 37
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_low(&PORTB, RELAY2);
 608:	64 e0       	ldi	r22, 0x04	; 4
 60a:	85 e2       	ldi	r24, 0x25	; 37
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	99 ef       	ldi	r25, 0xF9	; 249
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	81 50       	subi	r24, 0x01	; 1
 61a:	90 40       	sbci	r25, 0x00	; 0
 61c:	20 40       	sbci	r18, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <__vector_9+0x1a8>
 620:	00 c0       	rjmp	.+0      	; 0x622 <__vector_9+0x1b2>
 622:	00 00       	nop
		
		// close the window
		for ( int i = 0; i < 50000; i++){
			_delay_ms(20);
			GPIO_toggle(&PORTC, SERVO_M);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	88 e2       	ldi	r24, 0x28	; 40
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 62e:	8f e3       	ldi	r24, 0x3F	; 63
 630:	9f e1       	ldi	r25, 0x1F	; 31
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	f1 f7       	brne	.-4      	; 0x632 <__vector_9+0x1c2>
 636:	00 c0       	rjmp	.+0      	; 0x638 <__vector_9+0x1c8>
 638:	00 00       	nop
			_delay_ms(2);
			GPIO_toggle(&PORTC, SERVO_M);
 63a:	61 e0       	ldi	r22, 0x01	; 1
 63c:	88 e2       	ldi	r24, 0x28	; 40
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 644:	e6 cf       	rjmp	.-52     	; 0x612 <__vector_9+0x1a2>
		}
	}
	
	//low humidity
	else if ( humidity < 5){
 646:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 64a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 64e:	05 97       	sbiw	r24, 0x05	; 5
 650:	80 f4       	brcc	.+32     	; 0x672 <__vector_9+0x202>
		
		// start irrigation and stop ventilation
		GPIO_write_high(&PORTB, RELAY1);
 652:	65 e0       	ldi	r22, 0x05	; 5
 654:	85 e2       	ldi	r24, 0x25	; 37
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_low(&PORTB, RELAY2);
 65c:	64 e0       	ldi	r22, 0x04	; 4
 65e:	85 e2       	ldi	r24, 0x25	; 37
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		// close the window
		if ( windowState == true){
 666:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 66a:	88 23       	and	r24, r24
 66c:	89 f0       	breq	.+34     	; 0x690 <__vector_9+0x220>
			closeWindow();
 66e:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
	}
	
	//if the parameters are at the optimal level
	else{
		// stop irrigation and stop ventilation
		GPIO_write_low(&PORTB, RELAY1);
 672:	65 e0       	ldi	r22, 0x05	; 5
 674:	85 e2       	ldi	r24, 0x25	; 37
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_low(&PORTB, RELAY2);
 67c:	64 e0       	ldi	r22, 0x04	; 4
 67e:	85 e2       	ldi	r24, 0x25	; 37
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		// close the window
		if ( windowState == true){
 686:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 68a:	81 11       	cpse	r24, r1
			closeWindow();
 68c:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
			windowState = false;
		}
	}
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <twi_start>:
 6b2:	94 ea       	ldi	r25, 0xA4	; 164
 6b4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6b8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6bc:	99 23       	and	r25, r25
 6be:	e4 f7       	brge	.-8      	; 0x6b8 <twi_start+0x6>
 6c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 6c4:	84 e8       	ldi	r24, 0x84	; 132
 6c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6ce:	88 23       	and	r24, r24
 6d0:	e4 f7       	brge	.-8      	; 0x6ca <twi_start+0x18>
 6d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6d6:	88 7f       	andi	r24, 0xF8	; 248
 6d8:	88 31       	cpi	r24, 0x18	; 24
 6da:	21 f0       	breq	.+8      	; 0x6e4 <twi_start+0x32>
 6dc:	80 34       	cpi	r24, 0x40	; 64
 6de:	21 f4       	brne	.+8      	; 0x6e8 <twi_start+0x36>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	08 95       	ret
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	08 95       	ret
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	08 95       	ret

000006ec <twi_write>:
 6ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 6f0:	84 e8       	ldi	r24, 0x84	; 132
 6f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6fa:	88 23       	and	r24, r24
 6fc:	e4 f7       	brge	.-8      	; 0x6f6 <twi_write+0xa>
 6fe:	08 95       	ret

00000700 <twi_read_ack>:
 700:	84 ec       	ldi	r24, 0xC4	; 196
 702:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 706:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 70a:	88 23       	and	r24, r24
 70c:	e4 f7       	brge	.-8      	; 0x706 <twi_read_ack+0x6>
 70e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 712:	08 95       	ret

00000714 <twi_read_nack>:
 714:	84 e8       	ldi	r24, 0x84	; 132
 716:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 71a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 71e:	88 23       	and	r24, r24
 720:	e4 f7       	brge	.-8      	; 0x71a <twi_read_nack+0x6>
 722:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 726:	08 95       	ret

00000728 <twi_stop>:
 728:	84 e9       	ldi	r24, 0x94	; 148
 72a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 72e:	08 95       	ret

00000730 <__vector_18>:
 730:	1f 92       	push	r1
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	0f 92       	push	r0
 738:	11 24       	eor	r1, r1
 73a:	2f 93       	push	r18
 73c:	8f 93       	push	r24
 73e:	9f 93       	push	r25
 740:	ef 93       	push	r30
 742:	ff 93       	push	r31
 744:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 748:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 74c:	8c 71       	andi	r24, 0x1C	; 28
 74e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <UART_RxHead>
 752:	ef 5f       	subi	r30, 0xFF	; 255
 754:	ef 71       	andi	r30, 0x1F	; 31
 756:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <UART_RxTail>
 75a:	e9 17       	cp	r30, r25
 75c:	39 f0       	breq	.+14     	; 0x76c <__vector_18+0x3c>
 75e:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <UART_RxHead>
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	e3 5c       	subi	r30, 0xC3	; 195
 766:	fe 4f       	sbci	r31, 0xFE	; 254
 768:	20 83       	st	Z, r18
 76a:	01 c0       	rjmp	.+2      	; 0x76e <__vector_18+0x3e>
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <UART_LastRxError>
 772:	89 2b       	or	r24, r25
 774:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <UART_LastRxError>
 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <__vector_19>:
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	8f 93       	push	r24
 798:	9f 93       	push	r25
 79a:	ef 93       	push	r30
 79c:	ff 93       	push	r31
 79e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <UART_TxHead>
 7a2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <UART_TxTail>
 7a6:	98 17       	cp	r25, r24
 7a8:	69 f0       	breq	.+26     	; 0x7c4 <__vector_19+0x38>
 7aa:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <UART_TxTail>
 7ae:	ef 5f       	subi	r30, 0xFF	; 255
 7b0:	ef 71       	andi	r30, 0x1F	; 31
 7b2:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <UART_TxTail>
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	e3 5a       	subi	r30, 0xA3	; 163
 7ba:	fe 4f       	sbci	r31, 0xFE	; 254
 7bc:	80 81       	ld	r24, Z
 7be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <__vector_19+0x42>
 7c4:	e1 ec       	ldi	r30, 0xC1	; 193
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	8f 7d       	andi	r24, 0xDF	; 223
 7cc:	80 83       	st	Z, r24
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	0f 90       	pop	r0
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	0f 90       	pop	r0
 7dc:	1f 90       	pop	r1
 7de:	18 95       	reti

000007e0 <uart_putc>:
 7e0:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <UART_TxHead>
 7e4:	2f 5f       	subi	r18, 0xFF	; 255
 7e6:	2f 71       	andi	r18, 0x1F	; 31
 7e8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <UART_TxTail>
 7ec:	29 17       	cp	r18, r25
 7ee:	e1 f3       	breq	.-8      	; 0x7e8 <uart_putc+0x8>
 7f0:	e2 2f       	mov	r30, r18
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	e3 5a       	subi	r30, 0xA3	; 163
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	80 83       	st	Z, r24
 7fa:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <UART_TxHead>
 7fe:	e1 ec       	ldi	r30, 0xC1	; 193
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	80 62       	ori	r24, 0x20	; 32
 806:	80 83       	st	Z, r24
 808:	08 95       	ret

0000080a <uart_puts>:
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	ec 01       	movw	r28, r24
 810:	03 c0       	rjmp	.+6      	; 0x818 <uart_puts+0xe>
 812:	21 96       	adiw	r28, 0x01	; 1
 814:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <uart_putc>
 818:	88 81       	ld	r24, Y
 81a:	81 11       	cpse	r24, r1
 81c:	fa cf       	rjmp	.-12     	; 0x812 <uart_puts+0x8>
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <__itoa_ncheck>:
 824:	bb 27       	eor	r27, r27
 826:	4a 30       	cpi	r20, 0x0A	; 10
 828:	31 f4       	brne	.+12     	; 0x836 <__itoa_ncheck+0x12>
 82a:	99 23       	and	r25, r25
 82c:	22 f4       	brpl	.+8      	; 0x836 <__itoa_ncheck+0x12>
 82e:	bd e2       	ldi	r27, 0x2D	; 45
 830:	90 95       	com	r25
 832:	81 95       	neg	r24
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__utoa_common>

0000083a <__utoa_ncheck>:
 83a:	bb 27       	eor	r27, r27

0000083c <__utoa_common>:
 83c:	fb 01       	movw	r30, r22
 83e:	55 27       	eor	r21, r21
 840:	aa 27       	eor	r26, r26
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	aa 1f       	adc	r26, r26
 848:	a4 17       	cp	r26, r20
 84a:	10 f0       	brcs	.+4      	; 0x850 <__utoa_common+0x14>
 84c:	a4 1b       	sub	r26, r20
 84e:	83 95       	inc	r24
 850:	50 51       	subi	r21, 0x10	; 16
 852:	b9 f7       	brne	.-18     	; 0x842 <__utoa_common+0x6>
 854:	a0 5d       	subi	r26, 0xD0	; 208
 856:	aa 33       	cpi	r26, 0x3A	; 58
 858:	08 f0       	brcs	.+2      	; 0x85c <__utoa_common+0x20>
 85a:	a9 5d       	subi	r26, 0xD9	; 217
 85c:	a1 93       	st	Z+, r26
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	79 f7       	brne	.-34     	; 0x840 <__utoa_common+0x4>
 862:	b1 11       	cpse	r27, r1
 864:	b1 93       	st	Z+, r27
 866:	11 92       	st	Z+, r1
 868:	cb 01       	movw	r24, r22
 86a:	0c 94 37 04 	jmp	0x86e	; 0x86e <strrev>

0000086e <strrev>:
 86e:	dc 01       	movw	r26, r24
 870:	fc 01       	movw	r30, r24
 872:	67 2f       	mov	r22, r23
 874:	71 91       	ld	r23, Z+
 876:	77 23       	and	r23, r23
 878:	e1 f7       	brne	.-8      	; 0x872 <strrev+0x4>
 87a:	32 97       	sbiw	r30, 0x02	; 2
 87c:	04 c0       	rjmp	.+8      	; 0x886 <strrev+0x18>
 87e:	7c 91       	ld	r23, X
 880:	6d 93       	st	X+, r22
 882:	70 83       	st	Z, r23
 884:	62 91       	ld	r22, -Z
 886:	ae 17       	cp	r26, r30
 888:	bf 07       	cpc	r27, r31
 88a:	c8 f3       	brcs	.-14     	; 0x87e <strrev+0x10>
 88c:	08 95       	ret

0000088e <_exit>:
 88e:	f8 94       	cli

00000890 <__stop_program>:
 890:	ff cf       	rjmp	.-2      	; 0x890 <__stop_program>
