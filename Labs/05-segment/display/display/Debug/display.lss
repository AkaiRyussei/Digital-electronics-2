
display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002f6  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd6  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000600  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d3  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num); 
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SEG_init>
	//						abcdefgDP   p3p2p1p0
   // SEG_update_shift_regs(8, 3);

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
	TIM1_overflow_262ms();
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	83 60       	ori	r24, 0x03	; 3
 102:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 104:	af e6       	ldi	r26, 0x6F	; 111
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	8c 91       	ld	r24, X
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	8c 93       	st	X, r24
	TIM0_overflow_4ms(); 
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	85 bd       	out	0x25, r24	; 37
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
	TIM0_overflow_interrupt_enable();
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24


    // Enables interrupts by setting the global interrupt mask
	sei();
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x36>

00000128 <__vector_16>:
    // Will never reach this
    return 0;
}

ISR(TIMER0_OVF_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	static uint8_t pos = 0;
	
	if (pos == 0){
 14a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 14e:	81 11       	cpse	r24, r1
 150:	06 c0       	rjmp	.+12     	; 0x15e <__vector_16+0x36>
		SEG_update_shift_regs(cnt0, 0);
 152:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	0e 94 02 01 	call	0x204	; 0x204 <SEG_update_shift_regs>
 15c:	07 c0       	rjmp	.+14     	; 0x16c <__vector_16+0x44>
	}
	else if (pos == 1) {
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	29 f4       	brne	.+10     	; 0x16c <__vector_16+0x44>
		SEG_update_shift_regs(cnt1, 1);
 162:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	0e 94 02 01 	call	0x204	; 0x204 <SEG_update_shift_regs>
	}
	pos++;
 16c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	if(pos > 1)
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	10 f0       	brcs	.+4      	; 0x17e <__vector_16+0x56>
	{
		pos = 0;
 17a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>

	}
	
	
	
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
    // WRITE YOUR CODE HERE
	cnt0++;
 1ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <cnt0>
	if(cnt0 > 9)
 1b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 1ba:	8a 30       	cpi	r24, 0x0A	; 10
 1bc:	68 f0       	brcs	.+26     	; 0x1d8 <__vector_13+0x38>
	{
		cnt0 = 0;
 1be:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt0>
		cnt1++;
 1c2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt1>
		if (cnt1 > 5)				// for assignment
 1cc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 1d0:	86 30       	cpi	r24, 0x06	; 6
 1d2:	10 f0       	brcs	.+4      	; 0x1d8 <__vector_13+0x38>
		{
			cnt1 = 0;				// for assignment
 1d4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt1>
	
	
	//SEG_update_shift_regs(cnt0,0);	// before assignment
	//SEG_update_shift_regs(cnt1,1);

}
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 1e4:	64 e0       	ldi	r22, 0x04	; 4
 1e6:	8a e2       	ldi	r24, 0x2A	; 42
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 1ee:	67 e0       	ldi	r22, 0x07	; 7
 1f0:	8a e2       	ldi	r24, 0x2A	; 42
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 202:	08 95       	ret

00000204 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 20a:	e8 2f       	mov	r30, r24
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ec 5f       	subi	r30, 0xFC	; 252
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 214:	e6 2f       	mov	r30, r22
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEG_LATCH);
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	8b e2       	ldi	r24, 0x2B	; 43
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEG_CLK);
 228:	67 e0       	ldi	r22, 0x07	; 7
 22a:	8b e2       	ldi	r24, 0x2B	; 43
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEG_DATA);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	85 e2       	ldi	r24, 0x25	; 37
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	85 e0       	ldi	r24, 0x05	; 5
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <SEG_update_shift_regs+0x3a>
 242:	00 00       	nop
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values) MSB---> LSB (a =msb ...)
	//&0 0 0 0 0 0 0 1
	//-----------------
	// 0 0 0 0 0 0 0 DP
    for (bit_number = 0; bit_number < 8; bit_number++)
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	21 c0       	rjmp	.+66     	; 0x28a <SEG_update_shift_regs+0x86>
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
		if((segments &  1)==0) // DP =0
 248:	10 fd       	sbrc	r17, 0
 24a:	06 c0       	rjmp	.+12     	; 0x258 <SEG_update_shift_regs+0x54>
		{
			GPIO_write_low(&PORTB, SEG_DATA);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 256:	05 c0       	rjmp	.+10     	; 0x262 <SEG_update_shift_regs+0x5e>
		}
		
		else
		{
			GPIO_write_high(&PORTB, SEG_DATA);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	85 e2       	ldi	r24, 0x25	; 37
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <SEG_update_shift_regs+0x60>
 268:	00 00       	nop
		}

        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEG_CLK);
 26a:	67 e0       	ldi	r22, 0x07	; 7
 26c:	8b e2       	ldi	r24, 0x2B	; 43
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <SEG_update_shift_regs+0x72>
 27a:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEG_CLK);
 27c:	67 e0       	ldi	r22, 0x07	; 7
 27e:	8b e2       	ldi	r24, 0x2B	; 43
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
		//		a b c d e f g DP
		// >>1  
		//		0 a b c d e f g
		// ... 
        segments = segments >> 1;
 286:	16 95       	lsr	r17
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values) MSB---> LSB (a =msb ...)
	//&0 0 0 0 0 0 0 1
	//-----------------
	// 0 0 0 0 0 0 0 DP
    for (bit_number = 0; bit_number < 8; bit_number++)
 288:	cf 5f       	subi	r28, 0xFF	; 255
 28a:	c8 30       	cpi	r28, 0x08	; 8
 28c:	e8 f2       	brcs	.-70     	; 0x248 <SEG_update_shift_regs+0x44>
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	21 c0       	rjmp	.+66     	; 0x2d4 <SEG_update_shift_regs+0xd0>
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
		
		if((position &  1)==0)
 292:	d0 fd       	sbrc	r29, 0
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <SEG_update_shift_regs+0x9e>
		{
			GPIO_write_low(&PORTB, SEG_DATA);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	85 e2       	ldi	r24, 0x25	; 37
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <SEG_update_shift_regs+0xa8>
		}
		
		else
		{
			GPIO_write_high(&PORTB, SEG_DATA);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <SEG_update_shift_regs+0xaa>
 2b2:	00 00       	nop
		}
        // Wait 1 us
		_delay_us(1);

        // Pull CLK high
		GPIO_write_high(&PORTD, SEG_CLK);
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	8b e2       	ldi	r24, 0x2B	; 43
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <SEG_update_shift_regs+0xbc>
 2c4:	00 00       	nop
        
		// Wait 1 us
		_delay_us(1);

        // Pull CLK low
		GPIO_write_low(&PORTD, SEG_CLK);
 2c6:	67 e0       	ldi	r22, 0x07	; 7
 2c8:	8b e2       	ldi	r24, 0x2B	; 43
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

        // Shift "position"
        position = position >> 1;
 2d0:	d6 95       	lsr	r29
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2d2:	cf 5f       	subi	r28, 0xFF	; 255
 2d4:	c8 30       	cpi	r28, 0x08	; 8
 2d6:	e8 f2       	brcs	.-70     	; 0x292 <SEG_update_shift_regs+0x8e>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEG_LATCH);
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	8b e2       	ldi	r24, 0x2B	; 43
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	8a 95       	dec	r24
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <SEG_update_shift_regs+0xe0>
 2e8:	00 00       	nop
	

    // Wait 1 us
	_delay_us(1);

}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
