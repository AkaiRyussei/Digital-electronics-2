
Rassemblement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000006fc  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  0080013c  0080013c  000007cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000136b  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e5  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000945  00000000  00000000  000026ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062e  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c8  00000000  00000000  0000395a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_18>
  4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <main>:

int main(void)
{
	// Servo motor part
	
	GPIO_config_output(&DDRC, SERVO_M);
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	87 e2       	ldi	r24, 0x27	; 39
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC, SERVO_M);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	// end servo motor part
	
	// Start RELAYS part
	DDRB = DDRB | (1<<RELAY1);
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<RELAY2);
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	80 61       	ori	r24, 0x10	; 16
  f6:	84 b9       	out	0x04, r24	; 4
	
	PORTB = PORTB & ~(1<<RELAY1);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & ~(1<<RELAY2);
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	85 b9       	out	0x05, r24	; 5
	//end RELAYS part
	
	//LED setup 
	GPIO_config_output(&DDRB, LED);
 104:	63 e0       	ldi	r22, 0x03	; 3
 106:	84 e2       	ldi	r24, 0x24	; 36
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED);
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	85 e2       	ldi	r24, 0x25	; 37
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	// end LED setup
	
	/* code of the light sensor */
    
	ADMUX |= (1<<REFS0);   // =1
 118:	ec e7       	ldi	r30, 0x7C	; 124
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);  // =0
 122:	80 81       	ld	r24, Z
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &=~ (1<<MUX3 | 1<< MUX2 | 1<< MUX1 | 1<<MUX0);
 128:	80 81       	ld	r24, Z
 12a:	80 7f       	andi	r24, 0xF0	; 240
 12c:	80 83       	st	Z, r24
	// Enable ADC module
	ADCSRA |= (1<<ADEN);
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 68       	ori	r24, 0x80	; 128
 136:	80 83       	st	Z, r24

	// Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
 138:	80 81       	ld	r24, Z
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= (1<< ADPS2 | 1<<ADPS1 | 1<<ADPS0);
 13e:	80 81       	ld	r24, Z
 140:	87 60       	ori	r24, 0x07	; 7
 142:	80 83       	st	Z, r24
	
	// Initialize I2C (TWI)
    twi_init();
 144:	0e 94 55 02 	call	0x4aa	; 0x4aa <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 148:	87 e6       	ldi	r24, 0x67	; 103
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
 150:	e1 e8       	ldi	r30, 0x81	; 129
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8a 7f       	andi	r24, 0xFA	; 250
 158:	80 83       	st	Z, r24
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 160:	ef e6       	ldi	r30, 0x6F	; 111
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
	
	TIM2_overflow_16ms();
 16a:	e1 eb       	ldi	r30, 0xB1	; 177
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	87 60       	ori	r24, 0x07	; 7
 172:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 174:	e0 e7       	ldi	r30, 0x70	; 112
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 17e:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
 188:	ff cf       	rjmp	.-2      	; 0x188 <main+0xb0>

0000018a <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	1f 93       	push	r17
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <__vector_13+0x2a>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
	//Start ADC conversion ( for the light sensor )
	ADCSRA |= (1<<ADSC);
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	80 83       	st	Z, r24
	
	/* here it's for hum and temp */
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 0x5c;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus 
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 1c2:	80 e3       	ldi	r24, 0x30	; 48
 1c4:	90 e3       	ldi	r25, 0x30	; 48
 1c6:	9a 83       	std	Y+2, r25	; 0x02
 1c8:	89 83       	std	Y+1, r24	; 0x01
    // FSM
    switch (state)
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	51 f0       	breq	.+20     	; 0x1e6 <__vector_13+0x5c>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <__vector_13+0x4e>
 1d6:	90 c0       	rjmp	.+288    	; 0x2f8 <__vector_13+0x16e>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	09 f0       	breq	.+2      	; 0x1de <__vector_13+0x54>
 1dc:	a1 c0       	rjmp	.+322    	; 0x320 <__vector_13+0x196>
    {
		
    case STATE_IDLE:
		state = STATE_SEND;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 1e4:	a0 c0       	rjmp	.+320    	; 0x326 <__vector_13+0x19c>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 1e6:	88 eb       	ldi	r24, 0xB8	; 184
 1e8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <twi_start>
			
		// TEMP + HUMID ==============
		
		
		
		if (nextLine == 0)
 1ec:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nextLine>
 1f0:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nextLine+0x1>
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	21 f4       	brne	.+8      	; 0x200 <__vector_13+0x76>
			twi_write(0x02); //0x00 for humid and 0x02 for temperature
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 81 02 	call	0x502	; 0x502 <twi_write>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <__vector_13+0x80>
		else if(nextLine == 1)
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	19 f4       	brne	.+6      	; 0x20a <__vector_13+0x80>
			twi_write(0x00);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 81 02 	call	0x502	; 0x502 <twi_write>
		
		if ( nextLine  <= 1 ){
 20a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nextLine>
 20e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nextLine+0x1>
 212:	02 97       	sbiw	r24, 0x02	; 2
 214:	0c f0       	brlt	.+2      	; 0x218 <__vector_13+0x8e>
 216:	59 c0       	rjmp	.+178    	; 0x2ca <__vector_13+0x140>
			twi_stop();
 218:	0e 94 9f 02 	call	0x53e	; 0x53e <twi_stop>
			result = twi_start((addr<<1) + TWI_READ);
 21c:	89 eb       	ldi	r24, 0xB9	; 185
 21e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <twi_start>
			//integer part
			result = twi_read_ack();
 222:	0e 94 8b 02 	call	0x516	; 0x516 <twi_read_ack>
			
			if (nextLine == 0){
 226:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <nextLine>
 22a:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <nextLine+0x1>
 22e:	21 15       	cp	r18, r1
 230:	31 05       	cpc	r19, r1
 232:	31 f4       	brne	.+12     	; 0x240 <__vector_13+0xb6>
				temperature = result;
 234:	48 2f       	mov	r20, r24
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <temperature+0x1>
 23c:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <temperature>
			}
			if (nextLine == 1){
 240:	21 30       	cpi	r18, 0x01	; 1
 242:	31 05       	cpc	r19, r1
 244:	31 f4       	brne	.+12     	; 0x252 <__vector_13+0xc8>
				humidity = result;
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <humidity+0x1>
 24e:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <humidity>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 252:	4a e0       	ldi	r20, 0x0A	; 10
 254:	be 01       	movw	r22, r28
 256:	6f 5f       	subi	r22, 0xFF	; 255
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 47 03 	call	0x68e	; 0x68e <__itoa_ncheck>
			}
			itoa(result, uart_string, 10);
			uart_puts(uart_string);
 260:	ce 01       	movw	r24, r28
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
			//fractional part
			result = twi_read_nack();
 268:	0e 94 95 02 	call	0x52a	; 0x52a <twi_read_nack>
 26c:	18 2f       	mov	r17, r24
			twi_stop();
 26e:	0e 94 9f 02 	call	0x53e	; 0x53e <twi_stop>
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	81 2f       	mov	r24, r17
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 47 03 	call	0x68e	; 0x68e <__itoa_ncheck>
			itoa(result, uart_string, 10);
			uart_puts(".");
 282:	8f e1       	ldi	r24, 0x1F	; 31
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
			uart_puts(uart_string);
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
			uart_puts(" ");
 292:	81 e2       	ldi	r24, 0x21	; 33
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
			
			if (nextLine == 0)
 29a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nextLine>
 29e:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nextLine+0x1>
 2a2:	89 2b       	or	r24, r25
 2a4:	21 f4       	brne	.+8      	; 0x2ae <__vector_13+0x124>
				uart_puts("degrees");
 2a6:	83 e2       	ldi	r24, 0x23	; 35
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
				
			if (nextLine == 1)
 2ae:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nextLine>
 2b2:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nextLine+0x1>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <__vector_13+0x138>
				uart_puts("humidity");
 2ba:	8b e2       	ldi	r24, 0x2B	; 43
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
				
				
			uart_puts(" ");
 2c2:	81 e2       	ldi	r24, 0x21	; 33
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
		}
		
		nextLine ++; 
 2ca:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nextLine>
 2ce:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nextLine+0x1>
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <nextLine+0x1>
 2d8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <nextLine>
		
		
		if ( nextLine == 3 ){
 2dc:	03 97       	sbiw	r24, 0x03	; 3
 2de:	41 f4       	brne	.+16     	; 0x2f0 <__vector_13+0x166>
			nextLine = 0; 
 2e0:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <nextLine+0x1>
 2e4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <nextLine>
			uart_puts("\r\n");
 2e8:	8c e1       	ldi	r24, 0x1C	; 28
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
		}
		
		state = STATE_IDLE;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 2f6:	17 c0       	rjmp	.+46     	; 0x326 <__vector_13+0x19c>
 2f8:	40 e1       	ldi	r20, 0x10	; 16
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	8c e5       	ldi	r24, 0x5C	; 92
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 47 03 	call	0x68e	; 0x68e <__itoa_ncheck>
    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		
		itoa(addr, uart_string, 16);
		uart_puts(uart_string);
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
		uart_puts(" ");
 310:	81 e2       	ldi	r24, 0x21	; 33
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
		state = STATE_IDLE;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 31e:	03 c0       	rjmp	.+6      	; 0x326 <__vector_13+0x19c>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
}
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	bf 91       	pop	r27
 334:	af 91       	pop	r26
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	7f 91       	pop	r23
 33c:	6f 91       	pop	r22
 33e:	5f 91       	pop	r21
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	1f 91       	pop	r17
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_21>:
	
ISR(ADC_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	00 d0       	rcall	.+0      	; 0x37a <__vector_21+0x28>
 37a:	00 d0       	rcall	.+0      	; 0x37c <__vector_21+0x2a>
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
	if ( nextLine == 2){
 380:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <nextLine>
 384:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <nextLine+0x1>
 388:	02 97       	sbiw	r24, 0x02	; 2
 38a:	31 f5       	brne	.+76     	; 0x3d8 <__vector_21+0x86>
		
		//Send ADC value to UART Tx
		uint16_t value = 0;
		char lcd_string[4] = "";
 38c:	1a 82       	std	Y+2, r1	; 0x02
 38e:	19 82       	std	Y+1, r1	; 0x01
 390:	1c 82       	std	Y+4, r1	; 0x04
 392:	1b 82       	std	Y+3, r1	; 0x03
		
		
		value = ADC;                  // Copy ADC result to 16-bit variable
 394:	e8 e7       	ldi	r30, 0x78	; 120
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	91 81       	ldd	r25, Z+1	; 0x01
		light = ADC;
 39c:	20 81       	ld	r18, Z
 39e:	31 81       	ldd	r19, Z+1	; 0x01
 3a0:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <__data_end+0x1>
 3a4:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <__data_end>
 3a8:	4a e0       	ldi	r20, 0x0A	; 10
 3aa:	be 01       	movw	r22, r28
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	0e 94 47 03 	call	0x68e	; 0x68e <__itoa_ncheck>
		itoa(value, lcd_string, 10);  // Convert decimal value to string

		//Send ADC value to UART Tx
		if ( change == false ){
 3b4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <change>
 3b8:	81 11       	cpse	r24, r1
 3ba:	08 c0       	rjmp	.+16     	; 0x3cc <__vector_21+0x7a>
			uart_puts(lcd_string);
 3bc:	ce 01       	movw	r24, r28
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
			uart_puts(" light");
 3c4:	84 e3       	ldi	r24, 0x34	; 52
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>
		}
		change = !change;
 3cc:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <change>
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	89 27       	eor	r24, r25
 3d4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <change>
	}
	
}
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__vector_9>:

ISR(TIMER2_OVF_vect){
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	00 d0       	rcall	.+0      	; 0x42e <__vector_9+0x28>
 42e:	00 d0       	rcall	.+0      	; 0x430 <__vector_9+0x2a>
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
	
	
	char lcd_string[4] = "";
 434:	1a 82       	std	Y+2, r1	; 0x02
 436:	19 82       	std	Y+1, r1	; 0x01
 438:	1c 82       	std	Y+4, r1	; 0x04
 43a:	1b 82       	std	Y+3, r1	; 0x03
	uart_puts(itoa((humidity%100),lcd_string,10));
 43c:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <humidity>
 440:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <humidity+0x1>
 444:	9f 01       	movw	r18, r30
 446:	36 95       	lsr	r19
 448:	27 95       	ror	r18
 44a:	36 95       	lsr	r19
 44c:	27 95       	ror	r18
 44e:	ab e7       	ldi	r26, 0x7B	; 123
 450:	b4 e1       	ldi	r27, 0x14	; 20
 452:	0e 94 38 03 	call	0x670	; 0x670 <__umulhisi3>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	44 e6       	ldi	r20, 0x64	; 100
 45c:	48 9f       	mul	r20, r24
 45e:	90 01       	movw	r18, r0
 460:	49 9f       	mul	r20, r25
 462:	30 0d       	add	r19, r0
 464:	11 24       	eor	r1, r1
 466:	4a e0       	ldi	r20, 0x0A	; 10
 468:	be 01       	movw	r22, r28
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	cf 01       	movw	r24, r30
 470:	82 1b       	sub	r24, r18
 472:	93 0b       	sbc	r25, r19
 474:	0e 94 47 03 	call	0x68e	; 0x68e <__itoa_ncheck>
 478:	0e 94 2b 03 	call	0x656	; 0x656 <uart_puts>

}
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 4aa:	87 b1       	in	r24, 0x07	; 7
 4ac:	8f 7c       	andi	r24, 0xCF	; 207
 4ae:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 4b0:	88 b1       	in	r24, 0x08	; 8
 4b2:	80 63       	ori	r24, 0x30	; 48
 4b4:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 4b6:	e9 eb       	ldi	r30, 0xB9	; 185
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	8c 7f       	andi	r24, 0xFC	; 252
 4be:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 4c0:	88 e9       	ldi	r24, 0x98	; 152
 4c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 4c6:	08 95       	ret

000004c8 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 4c8:	94 ea       	ldi	r25, 0xA4	; 164
 4ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 4ce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4d2:	99 23       	and	r25, r25
 4d4:	e4 f7       	brge	.-8      	; 0x4ce <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 4d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 4da:	84 e8       	ldi	r24, 0x84	; 132
 4dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 4e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4e4:	88 23       	and	r24, r24
 4e6:	e4 f7       	brge	.-8      	; 0x4e0 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 4e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4ec:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 4ee:	88 31       	cpi	r24, 0x18	; 24
 4f0:	21 f0       	breq	.+8      	; 0x4fa <twi_start+0x32>
 4f2:	80 34       	cpi	r24, 0x40	; 64
 4f4:	21 f4       	brne	.+8      	; 0x4fe <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 4fe:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 500:	08 95       	ret

00000502 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 502:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 506:	84 e8       	ldi	r24, 0x84	; 132
 508:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 50c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 510:	88 23       	and	r24, r24
 512:	e4 f7       	brge	.-8      	; 0x50c <twi_write+0xa>
}
 514:	08 95       	ret

00000516 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 516:	84 ec       	ldi	r24, 0xC4	; 196
 518:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 51c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 520:	88 23       	and	r24, r24
 522:	e4 f7       	brge	.-8      	; 0x51c <twi_read_ack+0x6>
    return (TWDR);
 524:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 528:	08 95       	ret

0000052a <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 52a:	84 e8       	ldi	r24, 0x84	; 132
 52c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 530:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 534:	88 23       	and	r24, r24
 536:	e4 f7       	brge	.-8      	; 0x530 <twi_read_nack+0x6>
    return (TWDR);
 538:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 53c:	08 95       	ret

0000053e <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 53e:	84 e9       	ldi	r24, 0x94	; 148
 540:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 544:	08 95       	ret

00000546 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	2f 93       	push	r18
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
 55a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 55e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 562:	8c 71       	andi	r24, 0x1C	; 28
 564:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <UART_RxHead>
 568:	ef 5f       	subi	r30, 0xFF	; 255
 56a:	ef 71       	andi	r30, 0x1F	; 31
 56c:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_RxTail>
 570:	e9 17       	cp	r30, r25
 572:	39 f0       	breq	.+14     	; 0x582 <__vector_18+0x3c>
 574:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <UART_RxHead>
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	e6 5b       	subi	r30, 0xB6	; 182
 57c:	fe 4f       	sbci	r31, 0xFE	; 254
 57e:	20 83       	st	Z, r18
 580:	01 c0       	rjmp	.+2      	; 0x584 <__vector_18+0x3e>
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_LastRxError>
 588:	89 2b       	or	r24, r25
 58a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <UART_LastRxError>
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__vector_19>:
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
 5b4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <UART_TxHead>
 5b8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <UART_TxTail>
 5bc:	98 17       	cp	r25, r24
 5be:	69 f0       	breq	.+26     	; 0x5da <__vector_19+0x38>
 5c0:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <UART_TxTail>
 5c4:	ef 5f       	subi	r30, 0xFF	; 255
 5c6:	ef 71       	andi	r30, 0x1F	; 31
 5c8:	e0 93 48 01 	sts	0x0148, r30	; 0x800148 <UART_TxTail>
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	e6 59       	subi	r30, 0x96	; 150
 5d0:	fe 4f       	sbci	r31, 0xFE	; 254
 5d2:	80 81       	ld	r24, Z
 5d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <__vector_19+0x42>
 5da:	e1 ec       	ldi	r30, 0xC1	; 193
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	8f 7d       	andi	r24, 0xDF	; 223
 5e2:	80 83       	st	Z, r24
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <uart_init>:
 5f6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <UART_TxHead>
 5fa:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <UART_TxTail>
 5fe:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <UART_RxHead>
 602:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_RxTail>
 606:	28 2f       	mov	r18, r24
 608:	39 2f       	mov	r19, r25
 60a:	33 23       	and	r19, r19
 60c:	1c f4       	brge	.+6      	; 0x614 <uart_init+0x1e>
 60e:	22 e0       	ldi	r18, 0x02	; 2
 610:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 614:	90 78       	andi	r25, 0x80	; 128
 616:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 61a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 61e:	88 e9       	ldi	r24, 0x98	; 152
 620:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 624:	86 e0       	ldi	r24, 0x06	; 6
 626:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 62a:	08 95       	ret

0000062c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 62c:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <UART_TxHead>
 630:	2f 5f       	subi	r18, 0xFF	; 255
 632:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 634:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <UART_TxTail>
 638:	29 17       	cp	r18, r25
 63a:	e1 f3       	breq	.-8      	; 0x634 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 63c:	e2 2f       	mov	r30, r18
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	e6 59       	subi	r30, 0x96	; 150
 642:	fe 4f       	sbci	r31, 0xFE	; 254
 644:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 646:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 64a:	e1 ec       	ldi	r30, 0xC1	; 193
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	80 62       	ori	r24, 0x20	; 32
 652:	80 83       	st	Z, r24
 654:	08 95       	ret

00000656 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	ec 01       	movw	r28, r24
    while (*s)
 65c:	03 c0       	rjmp	.+6      	; 0x664 <uart_puts+0xe>
        uart_putc(*s++);
 65e:	21 96       	adiw	r28, 0x01	; 1
 660:	0e 94 16 03 	call	0x62c	; 0x62c <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 664:	88 81       	ld	r24, Y
 666:	81 11       	cpse	r24, r1
 668:	fa cf       	rjmp	.-12     	; 0x65e <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <__umulhisi3>:
 670:	a2 9f       	mul	r26, r18
 672:	b0 01       	movw	r22, r0
 674:	b3 9f       	mul	r27, r19
 676:	c0 01       	movw	r24, r0
 678:	a3 9f       	mul	r26, r19
 67a:	70 0d       	add	r23, r0
 67c:	81 1d       	adc	r24, r1
 67e:	11 24       	eor	r1, r1
 680:	91 1d       	adc	r25, r1
 682:	b2 9f       	mul	r27, r18
 684:	70 0d       	add	r23, r0
 686:	81 1d       	adc	r24, r1
 688:	11 24       	eor	r1, r1
 68a:	91 1d       	adc	r25, r1
 68c:	08 95       	ret

0000068e <__itoa_ncheck>:
 68e:	bb 27       	eor	r27, r27
 690:	4a 30       	cpi	r20, 0x0A	; 10
 692:	31 f4       	brne	.+12     	; 0x6a0 <__itoa_ncheck+0x12>
 694:	99 23       	and	r25, r25
 696:	22 f4       	brpl	.+8      	; 0x6a0 <__itoa_ncheck+0x12>
 698:	bd e2       	ldi	r27, 0x2D	; 45
 69a:	90 95       	com	r25
 69c:	81 95       	neg	r24
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__utoa_common>

000006a4 <__utoa_ncheck>:
 6a4:	bb 27       	eor	r27, r27

000006a6 <__utoa_common>:
 6a6:	fb 01       	movw	r30, r22
 6a8:	55 27       	eor	r21, r21
 6aa:	aa 27       	eor	r26, r26
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	aa 1f       	adc	r26, r26
 6b2:	a4 17       	cp	r26, r20
 6b4:	10 f0       	brcs	.+4      	; 0x6ba <__utoa_common+0x14>
 6b6:	a4 1b       	sub	r26, r20
 6b8:	83 95       	inc	r24
 6ba:	50 51       	subi	r21, 0x10	; 16
 6bc:	b9 f7       	brne	.-18     	; 0x6ac <__utoa_common+0x6>
 6be:	a0 5d       	subi	r26, 0xD0	; 208
 6c0:	aa 33       	cpi	r26, 0x3A	; 58
 6c2:	08 f0       	brcs	.+2      	; 0x6c6 <__utoa_common+0x20>
 6c4:	a9 5d       	subi	r26, 0xD9	; 217
 6c6:	a1 93       	st	Z+, r26
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	79 f7       	brne	.-34     	; 0x6aa <__utoa_common+0x4>
 6cc:	b1 11       	cpse	r27, r1
 6ce:	b1 93       	st	Z+, r27
 6d0:	11 92       	st	Z+, r1
 6d2:	cb 01       	movw	r24, r22
 6d4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <strrev>

000006d8 <strrev>:
 6d8:	dc 01       	movw	r26, r24
 6da:	fc 01       	movw	r30, r24
 6dc:	67 2f       	mov	r22, r23
 6de:	71 91       	ld	r23, Z+
 6e0:	77 23       	and	r23, r23
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <strrev+0x4>
 6e4:	32 97       	sbiw	r30, 0x02	; 2
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <strrev+0x18>
 6e8:	7c 91       	ld	r23, X
 6ea:	6d 93       	st	X+, r22
 6ec:	70 83       	st	Z, r23
 6ee:	62 91       	ld	r22, -Z
 6f0:	ae 17       	cp	r26, r30
 6f2:	bf 07       	cpc	r27, r31
 6f4:	c8 f3       	brcs	.-14     	; 0x6e8 <strrev+0x10>
 6f6:	08 95       	ret

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
