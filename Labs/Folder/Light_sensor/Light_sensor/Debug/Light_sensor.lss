
Light_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000342  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800102  00800102  000003d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3d  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084b  00000000  00000000  00001005  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049f  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ce  00000000  00000000  0000233b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002809  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_18>
  4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 9f 01 	jmp	0x33e	; 0x33e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
    //lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
    //lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);   // =1
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);  // =0
  b0:	80 81       	ld	r24, Z
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	80 83       	st	Z, r24
    // Set input channel to ADC0
	ADMUX &=~ (1<<MUX3 | 1<< MUX2 | 1<< MUX1 | 1<<MUX0);
  b6:	80 81       	ld	r24, Z
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	80 83       	st	Z, r24
    // Enable ADC module
	ADCSRA |= (1<<ADEN);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
  c6:	80 81       	ld	r24, Z
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 83       	st	Z, r24
    // Set clock prescaler to 128
	ADCSRA |= (1<< ADPS2 | 1<<ADPS1 | 1<<ADPS0);
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
	TIM1_overflow_262ms();
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	83 60       	ori	r24, 0x03	; 3
  e0:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
  e2:	ef e6       	ldi	r30, 0x6F	; 111
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
   
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 2d 01 	call	0x25a	; 0x25a <uart_init>
	

    // Enables interrupts by setting the global interrupt mask
    sei();
  f4:	78 94       	sei
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x50>

000000f8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <__vector_21+0x28>
 14a:	00 d0       	rcall	.+0      	; 0x14c <__vector_21+0x2a>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
	uint16_t value = 0;
	char lcd_string[4] = "";
 150:	1a 82       	std	Y+2, r1	; 0x02
 152:	19 82       	std	Y+1, r1	; 0x01
 154:	1c 82       	std	Y+4, r1	; 0x04
 156:	1b 82       	std	Y+3, r1	; 0x03
	
	value = ADC;                  // Copy ADC result to 16-bit variable
 158:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 15c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 160:	4a e0       	ldi	r20, 0x0A	; 10
 162:	be 01       	movw	r22, r28
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7f 4f       	sbci	r23, 0xFF	; 255
 168:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__itoa_ncheck>
	//lcd_puts("    ");
	//lcd_gotoxy(8, 0);
	//lcd_puts(lcd_string);
		
	//Send ADC value to UART Tx
	uart_puts(lcd_string);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 5d 01 	call	0x2ba	; 0x2ba <uart_puts>
	uart_puts(" ");
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 5d 01 	call	0x2ba	; 0x2ba <uart_puts>
		//lcd_puts("     ");
		//lcd_gotoxy(8, 1);
		//lcd_puts("right");
	//}

 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
 1be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c6:	8c 71       	andi	r24, 0x1C	; 28
 1c8:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <UART_RxHead>
 1cc:	ef 5f       	subi	r30, 0xFF	; 255
 1ce:	ef 71       	andi	r30, 0x1F	; 31
 1d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_RxTail>
 1d4:	e9 17       	cp	r30, r25
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <__vector_18+0x3c>
 1d8:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <UART_RxHead>
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	e9 5f       	subi	r30, 0xF9	; 249
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	20 83       	st	Z, r18
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__vector_18+0x3e>
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 1ec:	89 2b       	or	r24, r25
 1ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	2f 91       	pop	r18
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_19>:
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
 218:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <UART_TxHead>
 21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <UART_TxTail>
 220:	98 17       	cp	r25, r24
 222:	69 f0       	breq	.+26     	; 0x23e <__vector_19+0x38>
 224:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <UART_TxTail>
 228:	ef 5f       	subi	r30, 0xFF	; 255
 22a:	ef 71       	andi	r30, 0x1F	; 31
 22c:	e0 93 05 01 	sts	0x0105, r30	; 0x800105 <UART_TxTail>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	e9 5d       	subi	r30, 0xD9	; 217
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	80 81       	ld	r24, Z
 238:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 23c:	05 c0       	rjmp	.+10     	; 0x248 <__vector_19+0x42>
 23e:	e1 ec       	ldi	r30, 0xC1	; 193
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	80 83       	st	Z, r24
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <uart_init>:
 25a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <UART_TxHead>
 25e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <UART_TxTail>
 262:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_RxHead>
 266:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_RxTail>
 26a:	28 2f       	mov	r18, r24
 26c:	39 2f       	mov	r19, r25
 26e:	33 23       	and	r19, r19
 270:	1c f4       	brge	.+6      	; 0x278 <uart_init+0x1e>
 272:	22 e0       	ldi	r18, 0x02	; 2
 274:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 278:	90 78       	andi	r25, 0x80	; 128
 27a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 282:	88 e9       	ldi	r24, 0x98	; 152
 284:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 28e:	08 95       	ret

00000290 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 290:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <UART_TxHead>
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 298:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <UART_TxTail>
 29c:	29 17       	cp	r18, r25
 29e:	e1 f3       	breq	.-8      	; 0x298 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 2a0:	e2 2f       	mov	r30, r18
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	e9 5d       	subi	r30, 0xD9	; 217
 2a6:	fe 4f       	sbci	r31, 0xFE	; 254
 2a8:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 2aa:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 2ae:	e1 ec       	ldi	r30, 0xC1	; 193
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 62       	ori	r24, 0x20	; 32
 2b6:	80 83       	st	Z, r24
 2b8:	08 95       	ret

000002ba <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
    while (*s)
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <uart_puts+0xe>
        uart_putc(*s++);
 2c2:	21 96       	adiw	r28, 0x01	; 1
 2c4:	0e 94 48 01 	call	0x290	; 0x290 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 2c8:	88 81       	ld	r24, Y
 2ca:	81 11       	cpse	r24, r1
 2cc:	fa cf       	rjmp	.-12     	; 0x2c2 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <__itoa_ncheck>:
 2d4:	bb 27       	eor	r27, r27
 2d6:	4a 30       	cpi	r20, 0x0A	; 10
 2d8:	31 f4       	brne	.+12     	; 0x2e6 <__itoa_ncheck+0x12>
 2da:	99 23       	and	r25, r25
 2dc:	22 f4       	brpl	.+8      	; 0x2e6 <__itoa_ncheck+0x12>
 2de:	bd e2       	ldi	r27, 0x2D	; 45
 2e0:	90 95       	com	r25
 2e2:	81 95       	neg	r24
 2e4:	9f 4f       	sbci	r25, 0xFF	; 255
 2e6:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__utoa_common>

000002ea <__utoa_ncheck>:
 2ea:	bb 27       	eor	r27, r27

000002ec <__utoa_common>:
 2ec:	fb 01       	movw	r30, r22
 2ee:	55 27       	eor	r21, r21
 2f0:	aa 27       	eor	r26, r26
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	aa 1f       	adc	r26, r26
 2f8:	a4 17       	cp	r26, r20
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__utoa_common+0x14>
 2fc:	a4 1b       	sub	r26, r20
 2fe:	83 95       	inc	r24
 300:	50 51       	subi	r21, 0x10	; 16
 302:	b9 f7       	brne	.-18     	; 0x2f2 <__utoa_common+0x6>
 304:	a0 5d       	subi	r26, 0xD0	; 208
 306:	aa 33       	cpi	r26, 0x3A	; 58
 308:	08 f0       	brcs	.+2      	; 0x30c <__utoa_common+0x20>
 30a:	a9 5d       	subi	r26, 0xD9	; 217
 30c:	a1 93       	st	Z+, r26
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	79 f7       	brne	.-34     	; 0x2f0 <__utoa_common+0x4>
 312:	b1 11       	cpse	r27, r1
 314:	b1 93       	st	Z+, r27
 316:	11 92       	st	Z+, r1
 318:	cb 01       	movw	r24, r22
 31a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <strrev>

0000031e <strrev>:
 31e:	dc 01       	movw	r26, r24
 320:	fc 01       	movw	r30, r24
 322:	67 2f       	mov	r22, r23
 324:	71 91       	ld	r23, Z+
 326:	77 23       	and	r23, r23
 328:	e1 f7       	brne	.-8      	; 0x322 <strrev+0x4>
 32a:	32 97       	sbiw	r30, 0x02	; 2
 32c:	04 c0       	rjmp	.+8      	; 0x336 <strrev+0x18>
 32e:	7c 91       	ld	r23, X
 330:	6d 93       	st	X+, r22
 332:	70 83       	st	Z, r23
 334:	62 91       	ld	r22, -Z
 336:	ae 17       	cp	r26, r30
 338:	bf 07       	cpc	r27, r31
 33a:	c8 f3       	brcs	.-14     	; 0x32e <strrev+0x10>
 33c:	08 95       	ret

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
